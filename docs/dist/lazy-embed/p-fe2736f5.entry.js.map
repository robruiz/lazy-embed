{"version":3,"names":["lazyEmbedCss","LazyEmbed","src","previewImage","alt","width","height","videoTitle","loadOnVisible","loadOnParentOpen","loadOnClickSelector","loaded","observer","mutationObserver","clickTriggerElements","videoInfo","connectedCallback","this","parseVideoUrl","setupIntersectionObserver","setupMutationObserver","setupExternalClickListeners","disconnectedCallback","disconnect","forEach","element","handler","removeEventListener","type","id","embedUrl","youtubeRegex","youtubeMatch","match","vimeoRegex","vimeoMatch","triggerElements","document","querySelectorAll","length","console","warn","clickHandler","loadVideo","addEventListener","push","IntersectionObserver","entries","isIntersecting","rootMargin","threshold","observe","el","parentElement","querySelector","MutationObserver","mutations","mutation","attributeName","computedStyle","window","getComputedStyle","display","visibility","attributes","attributeFilter","handleClick","render","containerStyle","position","h","class","style","title","frameborder","allow","allowfullScreen"],"sources":["src/components/lazy-embed/lazy-embed.css?tag=lazy-embed&encapsulation=shadow","src/components/lazy-embed/lazy-embed.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.lazy-embed-container {\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  max-width: 100%;\n}\n\n/* Preview container styles */\n.preview-container {\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-bottom: 56.25%; /* 16:9 aspect ratio */\n  background-color: #000;\n  cursor: pointer;\n}\n\n/* Preview image styles */\n.preview-image {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n/* Placeholder styles (when no preview image is provided) */\n.placeholder {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n/* Play button overlay styles */\n.play-overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.2);\n  transition: background-color 0.3s ease;\n}\n\n.play-overlay:hover {\n  background-color: rgba(0, 0, 0, 0.4);\n}\n\n/* Play button styles */\n.play-button {\n  width: 68px;\n  height: 48px;\n  background-color: rgba(0, 0, 0, 0.7);\n  border-radius: 8px;\n  position: relative;\n  transition: background-color 0.3s ease;\n}\n\n.play-button::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-40%, -50%);\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 10px 0 10px 20px;\n  border-color: transparent transparent transparent #fff;\n}\n\n.play-overlay:hover .play-button {\n  background-color: #ff0000;\n}\n\n/* Responsive iframe container styles */\n.embed-responsive {\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-bottom: 56.25%; /* 16:9 aspect ratio */\n}\n\n.embed-responsive iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n","import { Component, Prop, State, Method, Element, Listen, h } from '@stencil/core';\n\n@Component({\n  tag: 'lazy-embed',\n  styleUrl: 'lazy-embed.css',\n  shadow: true,\n})\nexport class LazyEmbed {\n  /**\n   * Reference to the host element\n   */\n  @Element() el: HTMLElement;\n\n  /**\n   * URL of the video to embed (YouTube, Vimeo, etc.)\n   */\n  @Prop() src: string;\n\n  /**\n   * URL of the preview image to display before loading the video\n   */\n  @Prop() previewImage: string;\n\n  /**\n   * Alternative text for the preview image\n   */\n  @Prop() alt: string = 'Video preview';\n\n  /**\n   * Width of the embed (can be px or %)\n   */\n  @Prop() width: string = '100%';\n\n  /**\n   * Height of the embed (can be px or %)\n   */\n  @Prop() height: string = 'auto';\n\n  /**\n   * Title of the video (for accessibility)\n   */\n  @Prop() videoTitle: string = '';\n\n  /**\n   * Whether to load the video automatically when it becomes visible\n   */\n  @Prop() loadOnVisible: boolean = false;\n\n  /**\n   * Whether to load the video automatically when a parent element with the specified selector is opened\n   */\n  @Prop() loadOnParentOpen: string = '';\n\n  /**\n   * CSS selector for elements that should trigger video loading when clicked\n   */\n  @Prop() loadOnClickSelector: string = '';\n\n  /**\n   * Whether the video has been loaded\n   */\n  @State() loaded: boolean = false;\n\n  /**\n   * IntersectionObserver instance for detecting when the component is visible\n   */\n  private observer: IntersectionObserver;\n\n  /**\n   * MutationObserver instance for detecting when a parent element is opened\n   */\n  private mutationObserver: MutationObserver;\n\n  /**\n   * Store references to elements and their click event handlers\n   */\n  private clickTriggerElements: { element: Element; handler: EventListener }[] = [];\n\n  /**\n   * Parsed video information\n   */\n  private videoInfo: {\n    type: 'youtube' | 'vimeo' | 'unknown';\n    id: string;\n    embedUrl: string;\n  };\n\n  /**\n   * Component lifecycle method that runs when the component is first connected to the DOM\n   */\n  connectedCallback() {\n    this.parseVideoUrl();\n\n    if (this.loadOnVisible) {\n      this.setupIntersectionObserver();\n    }\n\n    if (this.loadOnParentOpen) {\n      this.setupMutationObserver();\n    }\n\n    if (this.loadOnClickSelector) {\n      this.setupExternalClickListeners();\n    }\n  }\n\n  /**\n   * Component lifecycle method that runs when the component is disconnected from the DOM\n   */\n  disconnectedCallback() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n    }\n\n    // Remove click event listeners\n    this.clickTriggerElements.forEach(({ element, handler }) => {\n      element.removeEventListener('click', handler);\n    });\n    this.clickTriggerElements = [];\n  }\n\n  /**\n   * Parse the video URL to extract information needed for embedding\n   */\n  private parseVideoUrl() {\n    if (!this.src) {\n      this.videoInfo = {\n        type: 'unknown',\n        id: '',\n        embedUrl: '',\n      };\n      return;\n    }\n\n    // YouTube URL patterns\n    const youtubeRegex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/i;\n    const youtubeMatch = this.src.match(youtubeRegex);\n\n    // Vimeo URL patterns\n    const vimeoRegex = /(?:vimeo\\.com\\/(?:video\\/)?|player\\.vimeo\\.com\\/video\\/)(\\d+)/i;\n    const vimeoMatch = this.src.match(vimeoRegex);\n\n    if (youtubeMatch && youtubeMatch[1]) {\n      this.videoInfo = {\n        type: 'youtube',\n        id: youtubeMatch[1],\n        embedUrl: `https://www.youtube.com/embed/${youtubeMatch[1]}?autoplay=1`,\n      };\n    } else if (vimeoMatch && vimeoMatch[1]) {\n      this.videoInfo = {\n        type: 'vimeo',\n        id: vimeoMatch[1],\n        embedUrl: `https://player.vimeo.com/video/${vimeoMatch[1]}?autoplay=1`,\n      };\n    } else {\n      // For other embed types, use the src directly\n      this.videoInfo = {\n        type: 'unknown',\n        id: '',\n        embedUrl: this.src,\n      };\n    }\n  }\n\n  // Add a new method to set up click event listeners\n  private setupExternalClickListeners() {\n    if (!this.loadOnClickSelector) {\n      return;\n    }\n\n    const triggerElements = document.querySelectorAll(this.loadOnClickSelector);\n\n    if (triggerElements.length === 0) {\n      console.warn(`No elements found matching selector \"${this.loadOnClickSelector}\"`);\n      return;\n    }\n\n    triggerElements.forEach(element => {\n      const clickHandler = () => {\n        if (!this.loaded) {\n          this.loadVideo();\n        }\n      };\n\n      element.addEventListener('click', clickHandler);\n      this.clickTriggerElements.push({ element, handler: clickHandler });\n    });\n  }\n\n  /**\n   * Set up IntersectionObserver to detect when the component is visible\n   */\n  private setupIntersectionObserver() {\n    this.observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && !this.loaded) {\n          this.loadVideo();\n        }\n      },\n      {\n        rootMargin: '100px',\n        threshold: 0.1,\n      }\n    );\n\n    this.observer.observe(this.el);\n  }\n\n  /**\n   * Set up MutationObserver to detect when a parent element is opened\n   */\n  private setupMutationObserver() {\n    const parentElement = document.querySelector(this.loadOnParentOpen);\n\n    if (!parentElement) {\n      console.warn(`Parent element with selector \"${this.loadOnParentOpen}\" not found.`);\n      return;\n    }\n\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (\n          mutation.type === 'attributes' &&\n          (mutation.attributeName === 'class' || mutation.attributeName === 'style')\n        ) {\n          // Check if the parent element is now visible\n          const computedStyle = window.getComputedStyle(parentElement);\n          if (\n            computedStyle.display !== 'none' &&\n            computedStyle.visibility !== 'hidden' &&\n            !this.loaded\n          ) {\n            this.loadVideo();\n          }\n        }\n      });\n    });\n\n    this.mutationObserver.observe(parentElement, {\n      attributes: true,\n      attributeFilter: ['class', 'style'],\n    });\n  }\n\n  /**\n   * Load the video by replacing the preview image with the embed iframe\n   */\n  @Method()\n  async loadVideo() {\n    if (!this.loaded && this.videoInfo.embedUrl) {\n      this.loaded = true;\n    }\n  }\n\n  /**\n   * Listen for click events on the preview image\n   */\n  @Listen('click')\n  handleClick() {\n    if (!this.loaded) {\n      this.loadVideo();\n    }\n  }\n\n  render() {\n    const containerStyle = {\n      width: this.width,\n      height: this.height !== 'auto' ? this.height : null,\n      position: 'relative',\n    };\n\n    if (!this.loaded) {\n      return (\n        <div class=\"lazy-embed-container\" style={containerStyle}>\n          <div class=\"preview-container\">\n            {this.previewImage ? (\n              <img\n                src={this.previewImage}\n                alt={this.alt}\n                class=\"preview-image\"\n              />\n            ) : (\n              <div class=\"placeholder\">\n                <div class=\"play-button\"></div>\n              </div>\n            )}\n            <div class=\"play-overlay\">\n              <div class=\"play-button\" aria-label=\"Play video\"></div>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <div class=\"lazy-embed-container\" style={containerStyle}>\n          <div class=\"embed-responsive\">\n            <iframe\n              src={this.videoInfo.embedUrl}\n              title={this.videoTitle || 'Embedded video'}\n              frameborder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowfullScreen\n            ></iframe>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}